-- school_management.sql
CREATE DATABASE IF NOT EXISTS school_management;
USE school_management;

-- USERS
CREATE TABLE users (
  user_id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role ENUM('admin','teacher','student','parent') NOT NULL DEFAULT 'student',
  email VARCHAR(150),
  phone VARCHAR(20),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- PARENTS
CREATE TABLE parents (
  parent_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNIQUE,
  occupation VARCHAR(100),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- CLASSES
CREATE TABLE classes (
  class_id INT AUTO_INCREMENT PRIMARY KEY,
  class_name VARCHAR(50) NOT NULL,
  section VARCHAR(10)
);

-- SUBJECTS
CREATE TABLE subjects (
  subject_id INT AUTO_INCREMENT PRIMARY KEY,
  subject_name VARCHAR(100) NOT NULL,
  class_id INT,
  FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE SET NULL
);

-- STUDENTS
CREATE TABLE students (
  student_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNIQUE,
  admission_no VARCHAR(50) UNIQUE,
  dob DATE,
  gender ENUM('Male','Female','Other') DEFAULT 'Male',
  address TEXT,
  parent_id INT,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (parent_id) REFERENCES parents(parent_id) ON DELETE SET NULL
);

-- TEACHERS
CREATE TABLE teachers (
  teacher_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNIQUE,
  subject_specialization VARCHAR(150),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- ENROLLMENTS (student -> class)
CREATE TABLE enrollments (
  enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
  student_id INT,
  class_id INT,
  year YEAR,
  FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
  FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE
);

-- ATTENDANCE
CREATE TABLE attendance (
  attendance_id INT AUTO_INCREMENT PRIMARY KEY,
  student_id INT,
  class_id INT,
  date DATE,
  status ENUM('Present','Absent') DEFAULT 'Present',
  FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
  FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE
);

-- EXAMS
CREATE TABLE exams (
  exam_id INT AUTO_INCREMENT PRIMARY KEY,
  class_id INT,
  subject_id INT,
  exam_date DATE,
  FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE,
  FOREIGN KEY (subject_id) REFERENCES subjects(subject_id) ON DELETE SET NULL
);

-- RESULTS
CREATE TABLE results (
  result_id INT AUTO_INCREMENT PRIMARY KEY,
  exam_id INT,
  student_id INT,
  marks_obtained DECIMAL(6,2),
  grade VARCHAR(5),
  FOREIGN KEY (exam_id) REFERENCES exams(exam_id) ON DELETE CASCADE,
  FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE
);

-- Seed admin user (password: Admin@123) -- hash it first
INSERT INTO users (username, password, role, email) VALUES
('admin', '$2y$10$KIX/2dM7aY7g6JHqUqR2meb6E7Gj1y1sZpQw2HqzN8dG9Kk3bR2zK', 'admin', 'admin@example.com');

-- Note: The hashed password above should be generated by PHP password_hash('Admin@123', PASSWORD_DEFAULT)
